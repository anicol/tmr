// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saic.tmr.domain;

import com.saic.tmr.domain.BusinessUnitDataOnDemand;
import com.saic.tmr.domain.CommandDataOnDemand;
import com.saic.tmr.domain.CompanyDataOnDemand;
import com.saic.tmr.domain.NewBusinessDataOnDemand;
import com.saic.tmr.domain.OpCenterDataOnDemand;
import com.saic.tmr.domain.PersonDataOnDemand;
import com.saic.tmr.domain.ProcurementTypeDataOnDemand;
import com.saic.tmr.domain.PursuitRoleDataOnDemand;
import com.saic.tmr.domain.PursuitStatusDataOnDemand;
import com.saic.tmr.domain.Target;
import com.saic.tmr.domain.TargetDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TargetDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TargetDataOnDemand: @Component;
    
    private Random TargetDataOnDemand.rnd = new SecureRandom();
    
    private List<Target> TargetDataOnDemand.data;
    
    @Autowired
    private BusinessUnitDataOnDemand TargetDataOnDemand.businessUnitDataOnDemand;
    
    @Autowired
    private PersonDataOnDemand TargetDataOnDemand.personDataOnDemand;
    
    @Autowired
    private CommandDataOnDemand TargetDataOnDemand.commandDataOnDemand;
    
    @Autowired
    private NewBusinessDataOnDemand TargetDataOnDemand.newBusinessDataOnDemand;
    
    @Autowired
    private OpCenterDataOnDemand TargetDataOnDemand.opCenterDataOnDemand;
    
    @Autowired
    private CompanyDataOnDemand TargetDataOnDemand.companyDataOnDemand;
    
    @Autowired
    private ProcurementTypeDataOnDemand TargetDataOnDemand.procurementTypeDataOnDemand;
    
    @Autowired
    private PursuitRoleDataOnDemand TargetDataOnDemand.pursuitRoleDataOnDemand;
    
    @Autowired
    private PursuitStatusDataOnDemand TargetDataOnDemand.pursuitStatusDataOnDemand;
    
    public Target TargetDataOnDemand.getNewTransientTarget(int index) {
        Target obj = new Target();
        setAwardDate(obj, index);
        setBuValue(obj, index);
        setCodeName(obj, index);
        setComments(obj, index);
        setContractEffort(obj, index);
        setProcurementValue(obj, index);
        setRfpDate(obj, index);
        setRfpNumber(obj, index);
        setSubmittalDate(obj, index);
        setTargetNumber(obj, index);
        setTracCrmNumber(obj, index);
        setWinningBid(obj, index);
        return obj;
    }
    
    public void TargetDataOnDemand.setAwardDate(Target obj, int index) {
        Date awardDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAwardDate(awardDate);
    }
    
    public void TargetDataOnDemand.setBuValue(Target obj, int index) {
        Float buValue = new Integer(index).floatValue();
        obj.setBuValue(buValue);
    }
    
    public void TargetDataOnDemand.setCodeName(Target obj, int index) {
        String codeName = "codeName_" + index;
        obj.setCodeName(codeName);
    }
    
    public void TargetDataOnDemand.setComments(Target obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void TargetDataOnDemand.setContractEffort(Target obj, int index) {
        String contractEffort = "contractEffort_" + index;
        obj.setContractEffort(contractEffort);
    }
    
    public void TargetDataOnDemand.setProcurementValue(Target obj, int index) {
        Float procurementValue = new Integer(index).floatValue();
        obj.setProcurementValue(procurementValue);
    }
    
    public void TargetDataOnDemand.setRfpDate(Target obj, int index) {
        Date rfpDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRfpDate(rfpDate);
    }
    
    public void TargetDataOnDemand.setRfpNumber(Target obj, int index) {
        String rfpNumber = "rfpNumber_" + index;
        obj.setRfpNumber(rfpNumber);
    }
    
    public void TargetDataOnDemand.setSubmittalDate(Target obj, int index) {
        Date submittalDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSubmittalDate(submittalDate);
    }
    
    public void TargetDataOnDemand.setTargetNumber(Target obj, int index) {
        int targetNumber = index;
        obj.setTargetNumber(targetNumber);
    }
    
    public void TargetDataOnDemand.setTracCrmNumber(Target obj, int index) {
        String tracCrmNumber = "tracCrmNumber_" + index;
        obj.setTracCrmNumber(tracCrmNumber);
    }
    
    public void TargetDataOnDemand.setWinningBid(Target obj, int index) {
        Float winningBid = new Integer(index).floatValue();
        obj.setWinningBid(winningBid);
    }
    
    public Target TargetDataOnDemand.getSpecificTarget(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Target obj = data.get(index);
        Long id = obj.getId();
        return Target.findTarget(id);
    }
    
    public Target TargetDataOnDemand.getRandomTarget() {
        init();
        Target obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Target.findTarget(id);
    }
    
    public boolean TargetDataOnDemand.modifyTarget(Target obj) {
        return false;
    }
    
    public void TargetDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Target.findTargetEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Target' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Target>();
        for (int i = 0; i < 10; i++) {
            Target obj = getNewTransientTarget(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
