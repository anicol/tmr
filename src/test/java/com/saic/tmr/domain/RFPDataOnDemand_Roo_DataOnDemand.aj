// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saic.tmr.domain;

import com.saic.tmr.domain.CommandDataOnDemand;
import com.saic.tmr.domain.ContractTypeDataOnDemand;
import com.saic.tmr.domain.ProcurementTypeDataOnDemand;
import com.saic.tmr.domain.PursuitStatusDataOnDemand;
import com.saic.tmr.domain.RFP;
import com.saic.tmr.domain.RFPDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RFPDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RFPDataOnDemand: @Component;
    
    private Random RFPDataOnDemand.rnd = new SecureRandom();
    
    private List<RFP> RFPDataOnDemand.data;
    
    @Autowired
    private CommandDataOnDemand RFPDataOnDemand.commandDataOnDemand;
    
    @Autowired
    private ContractTypeDataOnDemand RFPDataOnDemand.contractTypeDataOnDemand;
    
    @Autowired
    private ProcurementTypeDataOnDemand RFPDataOnDemand.procurementTypeDataOnDemand;
    
    @Autowired
    private PursuitStatusDataOnDemand RFPDataOnDemand.pursuitStatusDataOnDemand;
    
    public RFP RFPDataOnDemand.getNewTransientRFP(int index) {
        RFP obj = new RFP();
        setAdvanceNoticeEndDate(obj, index);
        setComments(obj, index);
        setContractEffort(obj, index);
        setRfpIssueDate(obj, index);
        setRfpNumber(obj, index);
        setSubmittalDate(obj, index);
        setTargetNumber(obj, index);
        return obj;
    }
    
    public void RFPDataOnDemand.setAdvanceNoticeEndDate(RFP obj, int index) {
        Date advanceNoticeEndDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAdvanceNoticeEndDate(advanceNoticeEndDate);
    }
    
    public void RFPDataOnDemand.setComments(RFP obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void RFPDataOnDemand.setContractEffort(RFP obj, int index) {
        String contractEffort = "contractEffort_" + index;
        obj.setContractEffort(contractEffort);
    }
    
    public void RFPDataOnDemand.setRfpIssueDate(RFP obj, int index) {
        Date rfpIssueDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRfpIssueDate(rfpIssueDate);
    }
    
    public void RFPDataOnDemand.setRfpNumber(RFP obj, int index) {
        String rfpNumber = "rfpNumber_" + index;
        obj.setRfpNumber(rfpNumber);
    }
    
    public void RFPDataOnDemand.setSubmittalDate(RFP obj, int index) {
        Date submittalDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSubmittalDate(submittalDate);
    }
    
    public void RFPDataOnDemand.setTargetNumber(RFP obj, int index) {
        int targetNumber = index;
        obj.setTargetNumber(targetNumber);
    }
    
    public RFP RFPDataOnDemand.getSpecificRFP(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        RFP obj = data.get(index);
        Long id = obj.getId();
        return RFP.findRFP(id);
    }
    
    public RFP RFPDataOnDemand.getRandomRFP() {
        init();
        RFP obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return RFP.findRFP(id);
    }
    
    public boolean RFPDataOnDemand.modifyRFP(RFP obj) {
        return false;
    }
    
    public void RFPDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = RFP.findRFPEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'RFP' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<RFP>();
        for (int i = 0; i < 10; i++) {
            RFP obj = getNewTransientRFP(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
