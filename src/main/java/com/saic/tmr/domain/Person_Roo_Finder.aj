// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saic.tmr.domain;

import com.saic.tmr.domain.Person;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Person_Roo_Finder {
    
    public static TypedQuery<Person> Person.findPeopleByLastNameEqualsAndFirstNameEquals(String lastName, String firstName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE o.lastName = :lastName  AND o.firstName = :firstName", Person.class);
        q.setParameter("lastName", lastName);
        q.setParameter("firstName", firstName);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByLastNameLike(String lastName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE LOWER(o.lastName) LIKE LOWER(:lastName)", Person.class);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByLastNameLikeAndFirstNameLike(String lastName, String firstName) {
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE LOWER(o.lastName) LIKE LOWER(:lastName)  AND LOWER(o.firstName) LIKE LOWER(:firstName)", Person.class);
        q.setParameter("lastName", lastName);
        q.setParameter("firstName", firstName);
        return q;
    }
    
}
