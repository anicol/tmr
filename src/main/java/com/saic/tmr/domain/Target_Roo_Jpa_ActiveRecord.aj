// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saic.tmr.domain;

import com.saic.tmr.domain.Target;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Target_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Target.entityManager;
    
    public static final EntityManager Target.entityManager() {
        EntityManager em = new Target().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Target.countTargets() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Target o", Long.class).getSingleResult();
    }
    
    public static List<Target> Target.findAllTargets() {
        return entityManager().createQuery("SELECT o FROM Target o", Target.class).getResultList();
    }
    
    public static Target Target.findTarget(Long id) {
        if (id == null) return null;
        return entityManager().find(Target.class, id);
    }
    
    public static List<Target> Target.findTargetEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Target o", Target.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Target.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Target.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Target attached = Target.findTarget(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Target.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Target.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Target Target.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Target merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
